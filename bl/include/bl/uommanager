#ifndef __$__uommanager__bl
#define __$__uommanager__bl 1234
#include<iostream>
#include<bl/iuom>
#include<bl/uom>
#include<bl/iuommanager>
#include<map>
using namespace std;

namespace inventory
{
namespace business_layer
{

class UnitOfMeasurementTitleComparator
{
public:
bool operator ()(string *left, string *right);
};

class UnitOfMeasurementManager: public abc::IUnitOfMeasurementManager
{
private:
class _UnitOfMeasurement
{
public:
int code;
string *title;
};
class DataModel
{
public:
map<int, _UnitOfMeasurement *> codeWiseMap;
map<string *, _UnitOfMeasurement *, UnitOfMeasurementTitleComparator> titleWiseMap;
DataModel();
~DataModel();
void populateDataStructure();
};
static DataModel dataModel;
public:
void addUnitOfMeasurement(abc::IUnitOfMeasurement *unitOfMeasurement);
void updateUnitOfMeasurement(abc::IUnitOfMeasurement *unitOfMeasurement);
void removeUnitOfMeasurementByCode(int code);
void removeUnitOfMeasurementByTitle(string title);
abc::IUnitOfMeasurement * getUnitOfMeasurementByCode(int code);
abc::IUnitOfMeasurement *  getUnitOfMeasurementByTitle(string title);
forward_list<abc::IUnitOfMeasurement *> * getUnitOfMeasurements();
int unitOfMeasurementTitleExists(string title);
int unitOfMeasurementCodeExists(int code);
int getUnitOfMeasurementCount();
};
}
}
#endif